{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\SupplierDashBoard\\\\frontend\\\\src\\\\components\\\\MonthlySales\\\\MonthlySalesGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SalesChart = ({\n  vendorId\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    // Will contain month names\n    datasets: [{\n      label: 'Total Sold',\n      data: [],\n      // Will contain the total sold values\n      fill: false,\n      borderColor: 'rgba(75, 192, 192, 1)'\n    }]\n  });\n  useEffect(() => {\n    fetch(`/orders/products/monthly/${vendorId}`).then(response => response.json()).then(data => {\n      // Process the API response and prepare the chart data\n      const paymentData = data.data.paymentDate;\n      const monthlyTotals = {};\n      paymentData.forEach(product => {\n        product.paymentDate.forEach(month => {\n          for (const [key, value] of Object.entries(month)) {\n            if (monthlyTotals[key]) {\n              monthlyTotals[key] += value;\n            } else {\n              monthlyTotals[key] = value;\n            }\n          }\n        });\n      });\n      const updatedChartData = {\n        labels: Object.keys(monthlyTotals),\n        datasets: [{\n          label: 'Total Sold',\n          data: Object.values(monthlyTotals),\n          fill: false,\n          borderColor: 'rgba(75, 192, 192, 1)'\n        }]\n      };\n      setChartData(updatedChartData);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, [vendorId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(SalesChart, \"P/PWqUM+5F+2ZCQOJiTNXul2aXs=\");\n_c = SalesChart;\nexport default SalesChart;\nvar _c;\n$RefreshReg$(_c, \"SalesChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","jsxDEV","_jsxDEV","SalesChart","vendorId","_s","chartData","setChartData","labels","datasets","label","data","fill","borderColor","fetch","then","response","json","paymentData","paymentDate","monthlyTotals","forEach","product","month","key","value","Object","entries","updatedChartData","keys","values","catch","error","console","children","options","responsive","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/SupplierDashBoard/frontend/src/components/MonthlySales/MonthlySalesGraph.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst SalesChart = ({ vendorId }) => {\r\n  const [chartData, setChartData] = useState({\r\n    labels: [], // Will contain month names\r\n    datasets: [\r\n      {\r\n        label: 'Total Sold',\r\n        data: [], // Will contain the total sold values\r\n        fill: false,\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n      },\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch(`/orders/products/monthly/${vendorId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Process the API response and prepare the chart data\r\n        const paymentData = data.data.paymentDate;\r\n        const monthlyTotals = {};\r\n\r\n        paymentData.forEach(product => {\r\n          product.paymentDate.forEach(month => {\r\n            for (const [key, value] of Object.entries(month)) {\r\n              if (monthlyTotals[key]) {\r\n                monthlyTotals[key] += value;\r\n              } else {\r\n                monthlyTotals[key] = value;\r\n              }\r\n            }\r\n          });\r\n        });\r\n\r\n        const updatedChartData = {\r\n          labels: Object.keys(monthlyTotals),\r\n          datasets: [\r\n            {\r\n              label: 'Total Sold',\r\n              data: Object.values(monthlyTotals),\r\n              fill: false,\r\n              borderColor: 'rgba(75, 192, 192, 1)',\r\n            },\r\n          ],\r\n        };\r\n\r\n        setChartData(updatedChartData);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  }, [vendorId]);\r\n\r\n  return (\r\n    <div>\r\n      <Line data={chartData} options={{ responsive: true }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SalesChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACzCU,MAAM,EAAE,EAAE;IAAE;IACZC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,YAAY;MACnBC,IAAI,EAAE,EAAE;MAAE;MACVC,IAAI,EAAE,KAAK;MACXC,WAAW,EAAE;IACf,CAAC;EAEL,CAAC,CAAC;EAEFd,SAAS,CAAC,MAAM;IACde,KAAK,CAAE,4BAA2BV,QAAS,EAAC,CAAC,CAC1CW,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEJ,IAAI,IAAK;MACd;MACA,MAAMO,WAAW,GAAGP,IAAI,CAACA,IAAI,CAACQ,WAAW;MACzC,MAAMC,aAAa,GAAG,CAAC,CAAC;MAExBF,WAAW,CAACG,OAAO,CAACC,OAAO,IAAI;QAC7BA,OAAO,CAACH,WAAW,CAACE,OAAO,CAACE,KAAK,IAAI;UACnC,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;YAChD,IAAIH,aAAa,CAACI,GAAG,CAAC,EAAE;cACtBJ,aAAa,CAACI,GAAG,CAAC,IAAIC,KAAK;YAC7B,CAAC,MAAM;cACLL,aAAa,CAACI,GAAG,CAAC,GAAGC,KAAK;YAC5B;UACF;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,MAAMG,gBAAgB,GAAG;QACvBpB,MAAM,EAAEkB,MAAM,CAACG,IAAI,CAACT,aAAa,CAAC;QAClCX,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,YAAY;UACnBC,IAAI,EAAEe,MAAM,CAACI,MAAM,CAACV,aAAa,CAAC;UAClCR,IAAI,EAAE,KAAK;UACXC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MAEDN,YAAY,CAACqB,gBAAgB,CAAC;IAChC,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,CAAC5B,QAAQ,CAAC,CAAC;EAEd,oBACEF,OAAA;IAAAgC,QAAA,eACEhC,OAAA,CAACF,IAAI;MAACW,IAAI,EAAEL,SAAU;MAAC6B,OAAO,EAAE;QAAEC,UAAU,EAAE;MAAK;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrD,CAAC;AAEV,CAAC;AAACnC,EAAA,CAzDIF,UAAU;AAAAsC,EAAA,GAAVtC,UAAU;AA2DhB,eAAeA,UAAU;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}