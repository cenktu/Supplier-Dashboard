{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\SupplierDashBoard\\\\frontend\\\\src\\\\components\\\\MonthlySales\\\\MonthlySalesGraph.js\",\n  _s = $RefreshSig$();\nimport { React, useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport LineChart from './LineChart';\nimport { UserData } from './Data';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MonthlySalesGraph() {\n  _s();\n  const {\n    vendorId\n  } = useParams();\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(`/orders/products/monthly/${vendorId}`).then(response => response.json()).then(data => {\n      // Process the API response and prepare the chart data\n      const paymentData = data.data.paymentDate;\n      const monthlyTotals = {};\n      paymentData.forEach(product => {\n        product.paymentDate.forEach(month => {\n          for (const [key, value] of Object.entries(month)) {\n            if (monthlyTotals[key]) {\n              monthlyTotals[key] += value;\n            } else {\n              monthlyTotals[key] = value;\n            }\n          }\n        });\n      });\n      const updatedChartData = {\n        labels: Object.keys(monthlyTotals),\n        datasets: [{\n          label: 'Total Sold',\n          data: Object.values(monthlyTotals),\n          fill: false,\n          borderColor: 'rgba(75, 192, 192, 1)'\n        }]\n      };\n      setChartData(updatedChartData);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, [vendorId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Total Sales for Vendor: \", vendorId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 700\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n        monthlyTotals: getMonthlySales(monthlyData)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(MonthlySalesGraph, \"Yxua5phlbnMu0sUcPSLBsKkaWhM=\", false, function () {\n  return [useParams];\n});\n_c = MonthlySalesGraph;\nexport default MonthlySalesGraph;\nvar _c;\n$RefreshReg$(_c, \"MonthlySalesGraph\");","map":{"version":3,"names":["React","useState","useEffect","Line","LineChart","UserData","useParams","jsxDEV","_jsxDEV","MonthlySalesGraph","_s","vendorId","monthlyData","setMonthlyData","loading","setLoading","fetch","then","response","json","data","paymentData","paymentDate","monthlyTotals","forEach","product","month","key","value","Object","entries","updatedChartData","labels","keys","datasets","label","values","fill","borderColor","setChartData","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","getMonthlySales","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/SupplierDashBoard/frontend/src/components/MonthlySales/MonthlySalesGraph.js"],"sourcesContent":["import {React, useState, useEffect} from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport LineChart from './LineChart';\r\nimport { UserData } from './Data';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction MonthlySalesGraph() {\r\n  const {vendorId} = useParams();\r\n  const [monthlyData, setMonthlyData]= useState([]);\r\n  const [loading,setLoading] =useState(true);\r\n  \r\n\r\n  useEffect(() => {\r\n    fetch(`/orders/products/monthly/${vendorId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Process the API response and prepare the chart data\r\n        const paymentData = data.data.paymentDate;\r\n        const monthlyTotals = {};\r\n\r\n        paymentData.forEach(product => {\r\n          product.paymentDate.forEach(month => {\r\n            for (const [key, value] of Object.entries(month)) {\r\n              if (monthlyTotals[key]) {\r\n                monthlyTotals[key] += value;\r\n              } else {\r\n                monthlyTotals[key] = value;\r\n              }\r\n            }\r\n          });\r\n        });\r\n\r\n        const updatedChartData = {\r\n          labels: Object.keys(monthlyTotals),\r\n          datasets: [\r\n            {\r\n              label: 'Total Sold',\r\n              data: Object.values(monthlyTotals),\r\n              fill: false,\r\n              borderColor: 'rgba(75, 192, 192, 1)',\r\n            },\r\n          ],\r\n        };\r\n\r\n        setChartData(updatedChartData);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  }, [vendorId]);\r\n\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <h2>Total Sales for Vendor: {vendorId}</h2>\r\n      {loading ? (\r\n        <p>Loading data...</p>\r\n      ) : (\r\n        <div style={{ width: 700 }}>\r\n          <table>\r\n            {/* Display the product table */}\r\n          </table>\r\n          <LineChart monthlyTotals={getMonthlySales(monthlyData)} />\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MonthlySalesGraph;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}