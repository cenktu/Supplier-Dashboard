{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\SupplierDashBoard\\\\frontend\\\\src\\\\components\\\\MonthlySales\\\\MonthlySalesGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Chart from './Chart'; // Import the Chart component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MonthlySalesGraph = () => {\n  _s();\n  const {\n    vendorId\n  } = useParams(); // Get the vendor ID from the URL\n  const [salesData, setSalesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(`/orders/products/monthly/${vendorId}`).then(response => response.json()).then(data => {\n      setSalesData(data.data.salesData);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, [vendorId]);\n\n  // Process the sales data to get monthly totals\n  const monthlySales = getMonthlySales(salesData);\n\n  // Render the table\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Total Sales for Vendor: \", vendorId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Product Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Total Amount Sold\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: salesData.map(product => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: product.productName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: product.totalSold\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 37\n            }, this)]\n          }, product._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n        monthlySales: monthlySales\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n// Function to process sales data and calculate monthly totals\n_s(MonthlySalesGraph, \"+pPWf2WmMzCRcXf63YMk6TbuCY8=\", false, function () {\n  return [useParams];\n});\n_c = MonthlySalesGraph;\nfunction getMonthlySales(data) {\n  const monthlySales = new Array(12).fill(0);\n  data.forEach(product => {\n    // You might need to parse the date from the product and extract the month\n    // For example: const month = new Date(product.date).getMonth();\n    // You can adjust this based on your actual data structure\n    // Here, we're using a placeholder value of 0 for the month\n    const month = 0;\n    monthlySales[month] += product.totalSold;\n  });\n  return monthlySales;\n}\n\n// Component to render the line chart\nconst LineChart = ({\n  monthlySales\n}) => {\n  const data = {\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    datasets: [{\n      label: 'Monthly Sales',\n      data: monthlySales,\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n\n  // Define the options for the chart\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monthly Sales Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_c2 = LineChart;\nexport default MonthlySalesGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"MonthlySalesGraph\");\n$RefreshReg$(_c2, \"LineChart\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Chart","jsxDEV","_jsxDEV","MonthlySalesGraph","_s","vendorId","salesData","setSalesData","loading","setLoading","fetch","then","response","json","data","catch","error","console","monthlySales","getMonthlySales","children","fileName","_jsxFileName","lineNumber","columnNumber","map","product","productName","totalSold","_id","LineChart","_c","Array","fill","forEach","month","labels","datasets","label","borderColor","tension","_c2","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/SupplierDashBoard/frontend/src/components/MonthlySales/MonthlySalesGraph.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport Chart from './Chart'; // Import the Chart component\r\n\r\nconst MonthlySalesGraph = () => {\r\n    const { vendorId } = useParams(); // Get the vendor ID from the URL\r\n    const [salesData, setSalesData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        fetch(`/orders/products/monthly/${vendorId}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setSalesData(data.data.salesData);\r\n                setLoading(false);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data:', error);\r\n            });\r\n    }, [vendorId]);\r\n\r\n    // Process the sales data to get monthly totals\r\n    const monthlySales = getMonthlySales(salesData);\r\n\r\n    // Render the table\r\n    return (\r\n        <div>\r\n            <h2>Total Sales for Vendor: {vendorId}</h2>\r\n            {loading ? (\r\n                <p>Loading data...</p>\r\n            ) : (\r\n                <div>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Product Name</th>\r\n                                <th>Total Amount Sold</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {salesData.map((product) => (\r\n                                <tr key={product._id}>\r\n                                    <td>{product.productName}</td>\r\n                                    <td>{product.totalSold}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <LineChart monthlySales={monthlySales} />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Function to process sales data and calculate monthly totals\r\nfunction getMonthlySales(data) {\r\n    const monthlySales = new Array(12).fill(0);\r\n\r\n    data.forEach((product) => {\r\n        // You might need to parse the date from the product and extract the month\r\n        // For example: const month = new Date(product.date).getMonth();\r\n        // You can adjust this based on your actual data structure\r\n        // Here, we're using a placeholder value of 0 for the month\r\n        const month = 0;\r\n\r\n        monthlySales[month] += product.totalSold;\r\n    });\r\n\r\n    return monthlySales;\r\n}\r\n\r\n// Component to render the line chart\r\nconst LineChart = ({ monthlySales }) => {\r\n    const data = {\r\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n        datasets: [\r\n            {\r\n                label: 'Monthly Sales',\r\n                data: monthlySales,\r\n                fill: false,\r\n                borderColor: 'rgb(75, 192, 192)',\r\n                tension: 0.1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    // Define the options for the chart\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Monthly Sales Chart</h2>\r\n            <Chart data={data} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MonthlySalesGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}