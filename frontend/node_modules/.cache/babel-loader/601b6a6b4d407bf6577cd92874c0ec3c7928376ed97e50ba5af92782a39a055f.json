{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\SupplierDashBoard\\\\frontend\\\\src\\\\components\\\\MonthlySales\\\\MonthlySalesGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement);\nconst MonthlySalesGraph = () => {\n  _s();\n  const {\n    vendorId\n  } = useParams(); // Get the vendor ID from the URL\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(`/orders/products/monthly/${vendorId}`).then(response => response.json()).then(data => {\n      setSalesData(data.data.salesData);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, [vendorId]);\n\n  // Process the sales data to get monthly totals\n  const monthlySales = getMonthlySales(salesData);\n\n  // Render the table\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Total Sales for Vendor: \", vendorId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n        monthlyTotals: getMonthlySales(monthlyData)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n// Function to process sales data and calculate monthly totals\n_s(MonthlySalesGraph, \"T1YQybHwKICMuR2pZfYphSWoNHE=\", false, function () {\n  return [useParams];\n});\n_c = MonthlySalesGraph;\nfunction getMonthlySales(data) {\n  const monthlyTotals = {};\n  data.forEach(product => {\n    product.paymentDate.forEach(monthData => {\n      const monthName = Object.keys(monthData)[0];\n      const monthTotal = monthData[monthName];\n      if (monthlyTotals[monthName]) {\n        monthlyTotals[monthName] += monthTotal;\n      } else {\n        monthlyTotals[monthName] = monthTotal;\n      }\n    });\n  });\n  return monthlyTotals;\n}\n\n// Component to render the line chart\nconst LineChart = ({\n  monthlyTotals\n}) => {\n  const data = {\n    labels: Object.keys(monthlyTotals),\n    datasets: [{\n      label: 'Monthly Sales',\n      data: Object.values(monthlyTotals),\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monthly Sales Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 7\n  }, this);\n};\n_c2 = LineChart;\nexport default MonthlySalesGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"MonthlySalesGraph\");\n$RefreshReg$(_c2, \"LineChart\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","jsxDEV","_jsxDEV","register","MonthlySalesGraph","_s","vendorId","monthlyData","setMonthlyData","loading","setLoading","fetch","then","response","json","data","setSalesData","salesData","catch","error","console","monthlySales","getMonthlySales","children","fileName","_jsxFileName","lineNumber","columnNumber","LineChart","monthlyTotals","_c","forEach","product","paymentDate","monthData","monthName","Object","keys","monthTotal","labels","datasets","label","values","fill","borderColor","tension","_c2","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/SupplierDashBoard/frontend/src/components/MonthlySales/MonthlySalesGraph.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport {\r\n    Chart as ChartJS,\r\n    LineElement,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n    LineElement,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement\r\n)\r\nconst MonthlySalesGraph = () => {\r\n    const { vendorId } = useParams(); // Get the vendor ID from the URL\r\n    const [monthlyData, setMonthlyData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        fetch(`/orders/products/monthly/${vendorId}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setSalesData(data.data.salesData);\r\n                setLoading(false);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data:', error);\r\n            });\r\n    }, [vendorId]);\r\n\r\n    // Process the sales data to get monthly totals\r\n    const monthlySales = getMonthlySales(salesData);\r\n\r\n    // Render the table\r\n    return (\r\n        <div>\r\n          <h2>Total Sales for Vendor: {vendorId}</h2>\r\n          {loading ? (\r\n            <p>Loading data...</p>\r\n          ) : (\r\n            <div>\r\n              <table>\r\n                {/* Display the product table */}\r\n              </table>\r\n              <LineChart monthlyTotals={getMonthlySales(monthlyData)} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n};\r\n\r\n// Function to process sales data and calculate monthly totals\r\nfunction getMonthlySales(data) {\r\n    const monthlyTotals = {};\r\n    \r\n    data.forEach((product) => {\r\n      product.paymentDate.forEach((monthData) => {\r\n        const monthName = Object.keys(monthData)[0];\r\n        const monthTotal = monthData[monthName];\r\n        \r\n        if (monthlyTotals[monthName]) {\r\n          monthlyTotals[monthName] += monthTotal;\r\n        } else {\r\n          monthlyTotals[monthName] = monthTotal;\r\n        }\r\n      });\r\n    });\r\n    \r\n    return monthlyTotals;\r\n  }\r\n\r\n// Component to render the line chart\r\nconst LineChart = ({ monthlyTotals }) => {\r\n    const data = {\r\n      labels: Object.keys(monthlyTotals),\r\n      datasets: [\r\n        {\r\n          label: 'Monthly Sales',\r\n          data: Object.values(monthlyTotals),\r\n          fill: false,\r\n          borderColor: 'rgb(75, 192, 192)',\r\n          tension: 0.1,\r\n        },\r\n      ],\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <h2>Monthly Sales Chart</h2>\r\n        <Line data={data} />\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default MonthlySalesGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}